<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://archzi.github.io/</id><title>HeX</title><subtitle>Happy coding, Happy living!</subtitle> <updated>2023-11-03T17:46:10+08:00</updated> <author> <name>archzi</name> <uri>https://archzi.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://archzi.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://archzi.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 archzi </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Gradle 基础学习笔记</title><link href="https://archzi.github.io/posts/Start-with-Gradle/" rel="alternate" type="text/html" title="Gradle 基础学习笔记" /><published>2021-06-02T01:00:00+08:00</published> <updated>2021-06-02T01:00:00+08:00</updated> <id>https://archzi.github.io/posts/Start-with-Gradle/</id> <content src="https://archzi.github.io/posts/Start-with-Gradle/" /> <author> <name>archzi</name> </author> <category term="构建工具" /> <summary> 介绍 gralde 是一个 开源的自动化构建工具，设计的初衷就是为了足够灵活，来满足几乎所有软件的构建需求。并且具有以下的功能： 高性能 只编译需要编译的部分（因为 task 的输入和输出变动），甚至可以在不同的机器上利用 build cache（有共享 cache 的条件下） 基于 JVM 熟悉java 的人很轻松就能学会 基于约定实现 gradle 借鉴了 maven，并建立了基于约定实现的通用项目很容易就能够构建，比如 java 项目，并且 这些实现也可以很轻松就被自定义，只需要遵循实现约定 可扩展性 可以轻松扩展 gradle 来自定义 tasks 或者 build model ，例如： 安卓的构建过程就添加了很多新的构建类型和风格 IDE suppoort 很多主流 IDE 可以引入 gradle 项目以便与与之交互，并且 gra... </summary> </entry> <entry><title>Java interface</title><link href="https://archzi.github.io/posts/Java-Interface/" rel="alternate" type="text/html" title="Java interface" /><published>2021-06-02T00:00:00+08:00</published> <updated>2021-06-02T00:00:00+08:00</updated> <id>https://archzi.github.io/posts/Java-Interface/</id> <content src="https://archzi.github.io/posts/Java-Interface/" /> <author> <name>archzi</name> </author> <summary> </summary> </entry> <entry><title>后端研发日志记录规范</title><link href="https://archzi.github.io/posts/log-conduct/" rel="alternate" type="text/html" title="后端研发日志记录规范" /><published>2020-07-02T01:00:00+08:00</published> <updated>2020-07-02T01:00:00+08:00</updated> <id>https://archzi.github.io/posts/log-conduct/</id> <content src="https://archzi.github.io/posts/log-conduct/" /> <author> <name>archzi</name> </author> <category term="笔记" /> <summary> 背景 日志：记录程序的运行轨迹，方便查找关键信息，也方便快速定位解决问题。 随着公司发展，后端项目app的数量 越来越多，排查问题的复杂度越来越高，需要对日志的格式统一规划，便于后续日志收集分析报警。 日志的作用（WHY） 问题追踪： 辅助排查和定位线上问题，优化程序运行性能。 状态监控： 通过日志分析，可以监控系统的运行状态。 安全审计： 审计主要体现在安全上，可以发现非授权的操作。 技术选型 经过调研，公司目前所有后端java 应用都是spring-boot 技术栈，而spring-boot的底层日志依赖关系如下图所示： 且，logback是 slf4j的默认实现，性能比log4j好很多,所以 后端统一选择用logback作为日志记录依赖。 使用 lombok 插件增强添加 log 变量 记录规范 (HOW) 记录时机 当符合... </summary> </entry> <entry><title>日志收集</title><link href="https://archzi.github.io/posts/how-to-collect-log/" rel="alternate" type="text/html" title="日志收集" /><published>2020-07-02T01:00:00+08:00</published> <updated>2020-07-02T01:00:00+08:00</updated> <id>https://archzi.github.io/posts/how-to-collect-log/</id> <content src="https://archzi.github.io/posts/how-to-collect-log/" /> <author> <name>archzi</name> </author> <category term="笔记" /> <summary> logstash 缺点： 性能问题 具体 benchmark 可以参考链接 不支持缓存，典型的替代方案还得依赖 kafka 或者Redis 作为中心缓存池 Flume Flume基于流式数据的、使用简单的（借助配置文件即可）、健壮的、容错的。 Flume的简单体现在：写一个source、channel、sink之后，一条命令就能操作成功。 Flume、Kafka实时进行数据收集，Storm、Spark实时数据处理，Impala实时查询。 实现方式 监控文件 -&amp;gt; 产生事件 -&amp;gt; 发送到channel -&amp;gt; 发送到 sink -&amp;gt; HDFS 优点： 可恢复性强 与 kafka 类似，不过不是消息队列，是一种管道流的方式，提供了很多默认... </summary> </entry> <entry><title>Flink app 部署</title><link href="https://archzi.github.io/posts/Flink-deploy/" rel="alternate" type="text/html" title="Flink app 部署" /><published>2020-06-13T01:00:00+08:00</published> <updated>2020-06-13T01:00:00+08:00</updated> <id>https://archzi.github.io/posts/Flink-deploy/</id> <content src="https://archzi.github.io/posts/Flink-deploy/" /> <author> <name>archzi</name> </author> <category term="大数据" /> <category term="Flink" /> <summary> 部署前检查工作 显式设置最大并行度 给所有的 operator 设置 uuid (如果 对 state 敏感的话) 设置 正确的状态储存后端，避免用 MemoryStateBackend FsStateBackend or RocksDBStateBackend 配置 JobManager 高可用 Standalone Cluster HA or YARN Cluster HA standalone 环境配置 ssh 两台机器 master.jizhang.com dev-1.jizhang.com 互相配置 ssh 免密登录并添加 hosts java 以下两种方式二选一 配置 JAVA_HOME conf/flink-conf.yaml 中 配置 env.java.home flink 设置 必须 conf... </summary> </entry> </feed>
